//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Development/Input/ManagementActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ManagementActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ManagementActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ManagementActions"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""22f7ffe5-3680-427b-9831-7f9a8c2e5bbe"",
            ""actions"": [
                {
                    ""name"": ""SetPlaneOnGround"",
                    ""type"": ""Button"",
                    ""id"": ""ad35af2a-81cc-443d-bcd3-8c81670ac7b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetPlaneInAir"",
                    ""type"": ""Button"",
                    ""id"": ""cf1f228f-010e-48f8-b029-955478251508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b45dd1f9-e27e-40c1-ae11-bf16236286fd"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""SetPlaneOnGround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eccad77-b271-4808-9333-b2b33f6bd1d7"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""SetPlaneInAir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""332b05c1-2deb-42bf-a44c-31554e35eae0"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""b3cf172e-4ed1-499f-9c88-bc86c5519625"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""250b9981-2128-460a-b65b-1e13c56b00a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""8da92f56-d23e-4e66-b57d-a18af7f28b5f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b14d47d8-8db0-471f-8a2b-7dd196dbc53c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""755d108a-edb9-4c9c-a13a-ab2b74817bf3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0198948-82ff-4440-8c37-416db476b647"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec57be86-9081-4ca1-85b1-f71966193eac"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""344dc440-e15f-43d0-8dab-ab0446f85742"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MainScheme"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MainScheme"",
            ""bindingGroup"": ""MainScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_SetPlaneOnGround = m_Keyboard.FindAction("SetPlaneOnGround", throwIfNotFound: true);
        m_Keyboard_SetPlaneInAir = m_Keyboard.FindAction("SetPlaneInAir", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_Press = m_Mouse.FindAction("Press", throwIfNotFound: true);
        m_Mouse_Release = m_Mouse.FindAction("Release", throwIfNotFound: true);
        m_Mouse_Position = m_Mouse.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_SetPlaneOnGround;
    private readonly InputAction m_Keyboard_SetPlaneInAir;
    public struct KeyboardActions
    {
        private @ManagementActions m_Wrapper;
        public KeyboardActions(@ManagementActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SetPlaneOnGround => m_Wrapper.m_Keyboard_SetPlaneOnGround;
        public InputAction @SetPlaneInAir => m_Wrapper.m_Keyboard_SetPlaneInAir;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @SetPlaneOnGround.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSetPlaneOnGround;
                @SetPlaneOnGround.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSetPlaneOnGround;
                @SetPlaneOnGround.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSetPlaneOnGround;
                @SetPlaneInAir.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSetPlaneInAir;
                @SetPlaneInAir.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSetPlaneInAir;
                @SetPlaneInAir.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSetPlaneInAir;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SetPlaneOnGround.started += instance.OnSetPlaneOnGround;
                @SetPlaneOnGround.performed += instance.OnSetPlaneOnGround;
                @SetPlaneOnGround.canceled += instance.OnSetPlaneOnGround;
                @SetPlaneInAir.started += instance.OnSetPlaneInAir;
                @SetPlaneInAir.performed += instance.OnSetPlaneInAir;
                @SetPlaneInAir.canceled += instance.OnSetPlaneInAir;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_Press;
    private readonly InputAction m_Mouse_Release;
    private readonly InputAction m_Mouse_Position;
    public struct MouseActions
    {
        private @ManagementActions m_Wrapper;
        public MouseActions(@ManagementActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_Mouse_Press;
        public InputAction @Release => m_Wrapper.m_Mouse_Release;
        public InputAction @Position => m_Wrapper.m_Mouse_Position;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @Press.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPress;
                @Release.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnRelease;
                @Release.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnRelease;
                @Release.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnRelease;
                @Position.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @Release.started += instance.OnRelease;
                @Release.performed += instance.OnRelease;
                @Release.canceled += instance.OnRelease;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);
    private int m_MainSchemeSchemeIndex = -1;
    public InputControlScheme MainSchemeScheme
    {
        get
        {
            if (m_MainSchemeSchemeIndex == -1) m_MainSchemeSchemeIndex = asset.FindControlSchemeIndex("MainScheme");
            return asset.controlSchemes[m_MainSchemeSchemeIndex];
        }
    }
    public interface IKeyboardActions
    {
        void OnSetPlaneOnGround(InputAction.CallbackContext context);
        void OnSetPlaneInAir(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnRelease(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
